{
  "name": "dcrspy",
  "tagline": "Don't stake blind.",
  "body": "![Travis](http://img.shields.io/travis/chappjc/dcrspy.svg)\r\n![GitHub release](https://img.shields.io/github/release/chappjc/dcrspy.svg)\r\n\r\ndcrspy is a program to continuously monitor and log changes in various data\r\non the Decred network.  It works by connecting to both dcrd and dcrwallet\r\nand responding when a new block is detected via a [notifier registered with\r\ndcrd over a websocket][1].  Communication with dcrd and dcrwallet uses the [Decred JSON-RPC API][2].\r\n\r\n## Types of Data\r\n\r\nThe types of information monitored are:\r\n\r\n* Block chain data (from dcrd)\r\n* Stake and wallet information (from your wallet, optional).\r\n* Mempool ticket info (from dcrd)\r\n\r\nA connection to dcrwallet is optional. Only block data will be obtained when no\r\nwallet connection is available.\r\n\r\nSee [Data Details](#data-details) below for more information.\r\n\r\nTransactions involving **watched addresses** may also be logged (using the\r\n`watchaddress` flag).  Watching for addresses receiving funds seems to be OK,\r\nbut watching for sending funds from a watched address is experimental.\r\n\r\n## Arbitrary Command Execution\r\n\r\nWhen dcrspy receives a new block notification from dcrd, data collection and\r\nrecording is triggered. In addition, any system command may be executed in\r\nresponse to the new block.  The flags to specify the command and the arguments\r\nto be used are:\r\n\r\n    -c, --cmdname=         Command name to run. Must be on %PATH%.\r\n    -a, --cmdargs=         Comma-separated list of arguments for command to run.\r\n                           The specifier %n is substituted for block number at\r\n                           execution, and %h is substituted for block hash.\r\n\r\nThe command name must be an executable (binary or script) on your shell's PATH,\r\nwhich is `$PATH` in *NIX, and `%PATH%` in Windows.\r\n\r\nTODO: Delay execution, or run after data saving is complete.\r\n\r\n### Command Arguments\r\n\r\nAny arguments must be specified with\r\ncmdargs as a comma-separated list of strings.  For example:\r\n\r\n    -c ping -a \"127.0.0.1,-n,8\"\r\n\r\nwill execute the following on Linux:\r\n\r\n    /usr/bin/ping 127.0.0.1 -n 8\r\n\r\nSpecifying multiple arguments without commas, using spaces directly, is\r\nincorrect. For example, `-a \"127.0.0.1 -n 8\"` will not work.\r\n\r\nNote that if your command line arguments need to start with a dash (`-`) it is\r\nnecessary to use the config file.  For example,\r\n\r\n    cmdname=ls\r\n    cmdargs=\"-al\"\r\n\r\n### Block Hash and Height Substitution\r\n\r\nThe new block hash and height at the time of command execution may be included\r\non the command line using %h and %n, which are substituted for block hash and\r\nnumber. For example,\r\n\r\n    cmdname=echo\r\n    cmdargs=\"New best block hash: %h; height: %n\"\r\n\r\nresults in the following log entries (date removed for brevity):\r\n\r\n    [INF] DCRD: Block height 36435 connected\r\n    [INF] EXEC: New best block hash: 000000000000070f7a0593aee0728d6b3334c1e454da06efc0138008dc1b1cbd; height: 36435\r\n    [INF] EXEC: Command execution complete (success).\r\n\r\nNote that the above command used a semicolon since a comma would have indicated\r\na second argument and been replaced with a space by echo.\r\n\r\n### Command Logging\r\n\r\nUser-specified system command execution uses the logging subsystem tagged with\r\nEXEC in the logs. Both stdout and stderr for the executed command are sent to\r\nthe dcrspy log.  The end of command execution is also logged, as shown in the\r\nexample above.\r\n\r\n## Output\r\n\r\nMultiple destinations for the data are planned:\r\n\r\n1. **stdout**.  JSON-formatted data is send to stdout. **DONE**.\r\n2. **File system**.  JSON-formatted data is written to the file system. **DONE**.\r\n3. **Database**. Data is inserted into a MySQL database. NOT IMPLEMENTED.\r\n4. **Plain text summary**: balances, votes, current ticket price, mean fees, \r\n   wallet status. **DONE**.\r\n5. **RESTful API** over HTTPS. NOT IMPLEMENTED.\r\n\r\nDetails of the JSON output may be found in [Data Details](#data-details).  The\r\nplain text summary looks something like the following (_wallet data redacted_):\r\n\r\n~~~none\r\nBlock 35561:\r\n        Stake difficulty:                    22.663 -> 22.663 (current -> next block)\r\n        Estimated price in next window:      25.279 / [24.63, 26.68] ([min, max])\r\n        Window progress:   138 / 144  of price window number 246\r\n        Ticket fees:  0.0101, 0.0101, 0.0000 (mean, median, std), n=1\r\n        Ticket pool:  42048 (size), 17.721 (avg. price), 745115.63 (total DCR locked)\r\n\r\nWallet and Stake Info at Height 35561:\r\n- Balances\r\n        Balances (spendable):     0.0000 (default),    0.0000 (all)\r\n        Balances (locked):      xxx.xxxx (default), xxxx.xxxx (all), xxxx.xxxx (imported)\r\n        Balances (any):        xxxx.xxxx (default), xxxx.xxxx (all)\r\n- Stake Info\r\n        ===>  Mining enabled: true;  Unlocked: true  <===\r\n        Mined tickets:        4 (immature),     43 (live)\r\n        mempool tickets:      0 (own),            6 (all)\r\n        Ticket price:      22.663  |    Window progress: 138 / 144\r\n        Wallet's price:     23.8100;  fee:   0.1940 / KiB\r\n        Totals:        541  votes,     919.84 subsidy\r\n                         1 missed,          1 revoked\r\n~~~\r\n\r\nNote: Ticket pool value takes up to 10 seconds to compute, so by default it is\r\nnot requested from dcrd, and thus not shown in the summary.  It is still\r\npresent in JSON, but the values are {0, -1, -1}.  To get actualy ticket pool\r\nvalue, use `-p, --poolvalue`.\r\n\r\n## TO-DO\r\n\r\ndcrspy is functional, but also a **work-in-progress**.  However, I will try to keep\r\n`master` as stable as possible, and develop new features in separate branches.\r\n\r\nThere is a [very long to-do list](https://drive.google.com/open?id=1Z057i7tGfnATWu0w7loetIkGElteNnlx2bJSxPvVOqE).\r\n\r\n## Requirements\r\n\r\n* [Go](http://golang.org) 1.6 or newer.\r\n* Running `dcrd` synchronized to the current best block on the network.\r\n* (Optional, for stake info) `dcrwallet` connected to `dcrd`.\r\n\r\n## Installation\r\n\r\n### Build from Source\r\n\r\n* Install Go:\r\n  http://golang.org/doc/install\r\n\r\n* Verify Go installation:\r\n\r\n `go env GOROOT GOPATH`\r\n\r\n* Build executable\r\n\r\n `go get -u -v github.com/chappjc/dcrspy`\r\n\r\n* Find dcrspy executable in `$GOPATH/bin`, and copy elsewhere (recommended).\r\n\r\nIf you receive build errors, it may be due to \"vendor\" directories left by\r\nglide builds of dependencies such as dcrwallet.  You may safely delete vendor\r\nfolders.\r\n\r\n## Updating\r\n\r\nRun the same command used to build:\r\n\r\n`go get -u -v github.com/chappjc/dcrspy`\r\n\r\n## Getting Started\r\n\r\nBy default, dcrspy will monitor both block data and your wallet, and write a\r\nplain text summary of the data to stdout for each new block that is detected.\r\n\r\nThere are several program options, which may be utilized via:\r\n\r\n1. Command line arguments\r\n1. Config file (e.g. dcrspy.conf)\r\n\r\n### Command line\r\n\r\nQuick tips:\r\n\r\n* Get a quick summary and exit, with `-e, --nomonitor`.\r\n* Stay connected and monitor for new blocks, writting:\r\n  * Plain text summary to stdout, with `-s, --summary`. \r\n  * JSON to stdout, with `-o, --save-jsonstdout`.\r\n  * JSON to file system, with `-j, --save-jsonfile`.\r\n* To monitor only block data (no wallet connection), use `--nostakeinfo`.\r\n\r\nThe full list of command line switches is below, with current directory\r\nreplaced by `...`:\r\n\r\n~~~ none\r\n$ ./dcrspy -h\r\nUsage:\r\n  dcrspy [OPTIONS]\r\n\r\nApplication Options:\r\n  -C, --configfile=      Path to configuration file (.../dcrspy.conf)\r\n  -V, --version          Display version information and exit\r\n      --testnet          Use the test network (default mainnet)\r\n      --simnet           Use the simulation test network (default mainnet)\r\n  -d, --debuglevel=      Logging level {trace, debug, info, warn, error, critical} (info)\r\n  -q, --quiet            Easy way to set debuglevel to error\r\n      --logdir=          Directory to log output (.../logs)\r\n  -c, --cmdname=         Command name to run. Must be on %PATH%.\r\n  -a, --cmdargs=         Comma-separated list of aruguments for command to run.\r\n  -e, --nomonitor        Do not launch monitors. Display current data and (e)xit.\r\n  -m, --mempool            Monitor mempool for new transactions, and report ticketfee info when new tickets are added.\r\n      --mp-min-interval=   The minimum time in seconds between mempool reports, regarless of number of new tickets seen. (4)\r\n      --mp-max-interval=   The maximum time in seconds between mempool reports (within a couple seconds), regarless of number of new tickets seen. (120)\r\n      --mp-ticket-trigger= The number minimum number of new tickets that must be seen to trigger a new mempool report. (4)\r\n      --noblockdata      Do not collect block data (default false)\r\n      --nostakeinfo      Do not collect stake info data (default false)\r\n  -p, --poolvalue        Collect ticket pool value information (8-9 sec).\r\n  -f, --outfolder=       Folder for file outputs (.../spydata)\r\n  -w, --watchaddress=      Decred address for which to watch for incoming transactions. One per line.\r\n  -s, --summary          Write plain text summary of key data to stdout\r\n  -o, --save-jsonstdout  Save JSON-formatted data to stdout\r\n  -j, --save-jsonfile    Save JSON-formatted data to file\r\n      --dcrduser=        Daemon RPC user name\r\n      --dcrdpass=        Daemon RPC password\r\n      --dcrdserv=        Hostname/IP and port of dcrd RPC server to connect to (default localhost:9109, testnet: localhost:19109, simnet: localhost:19556)\r\n      --dcrdcert=        File containing the dcrd certificate file (~/.dcrd/rpc.cert)\r\n      --dcrwuser=        Wallet RPC user name\r\n      --dcrwpass=        Wallet RPC password\r\n      --dcrwserv=        Hostname/IP and port of dcrwallet RPC server to connect to (default localhost:9110, testnet: localhost:19110, simnet: localhost:19557)\r\n      --dcrwcert=        File containing the dcrwallet certificate file (~/.dcrwallet/rpc.cert)\r\n      --noclienttls      Disable TLS for the RPC client -- NOTE: This is only allowed if the RPC client is connecting to localhost\r\n      --accountname=     Name of the account from (default: default) (default)\r\n      --ticketaddress=   Address to which you have given voting rights\r\n      --pooladdress=     Address to which you have given rights to pool fees\r\n\r\nHelp Options:\r\n  -h, --help             Show this help message\r\n~~~\r\n\r\n### Config file\r\n\r\nAll command line switches may be placed into the config file, which is\r\ndcrspy.conf by default.\r\n\r\n~~~ini\r\n[Application Options]\r\n\r\ndebuglevel=debug\r\n\r\n;cmdname=echo\r\n;cmdargs=\"New best block hash: %h; height: %n\"\r\n;cmdname=ping\r\n;cmdargs=\"127.0.0.1,-n,8\"\r\n\r\n; Monitor mempool for new tickets, displaying fees\r\n;mempool=true\r\n;mp-min-interval=4\r\n;mp-max-interval=120\r\n;mp-ticket-trigger=4\r\n\r\n; Addresses to watch for incoming transactions\r\n; Decred developer (C0) address\r\n;watchaddress=Dcur2mcGjmENx4DhNqDctW5wJCVyT3Qeqkx\r\n; Some larger mining pool addresses:\r\n;watchaddress=DsYAN3vT15rjzgoGgEEscoUpPCRtwQKL7dQ\r\n;watchaddress=DshZYJySTD4epCyoKRjPMyVmSvBpFuNYuZ4\r\n;watchaddress=DsZWrNNyKDUFPNMcjNYD7A8k9a4HCM5xgsW\r\n;watchaddress=Dsg2bQy2yt2onEcaQhT1X9UbTKNtqmHyMus\r\n;watchaddress=DskFbReCFNUjVHDf2WQP7AUKdB27EfSPYYE\r\n\r\n; Ticket pool value takes a long time, 8-9 sec, so the default is false.\r\n;poolvalue=false\r\n\r\n; Default outfolder is a folder called \"dcrspy\" in the working directory.\r\n; Change this with the outfolder option:\r\n; Windows\r\n; outfolder=%appdata%/dcrspy/spydata\r\n; Linux\r\n; outfolder=$HOME/dcrspy/spydata\r\n\r\n; Uncomment for testnet\r\n;testnet=1\r\n; But also remember ports below, or do not specify for network defaults.\r\n\r\ndcrduser=duser\r\ndcrdpass=asdfExample\r\n\r\ndcrdserv=localhost:9109\r\ndcrdcert=/home/me/.dcrd/rpc.cert\r\n\r\ndcrwuser=wuser\r\ndcrwpass=qwertyExample\r\n\r\ndcrwserv=localhost:9110\r\ndcrwcert=/home/me/.dcrwallet/rpc.cert\r\n~~~\r\n\r\n## Data Details\r\n\r\nBlock chain data obtained from dcrd includes several types of data.  The JSON\r\nfile written by dcrspy for block data is named `block-data-[BLOCKNUM].json`. It\r\ncontains a single JSON object, with each data type as a tagged JSON child\r\nobject.\r\n\r\n1. Block header (hash, voters, height, difficulty, nonce, time, etc.)\r\n\r\n ~~~json\r\n\"block_header\": {\r\n\t\"hash\": \"00000000000014c19867d5cd0f60d9409cd9e4ea68f656dac50befa756866cf8\",\r\n\t\"confirmations\": 1,\r\n\t\"version\": 1,\r\n\t\"previousblockhash\": \"00000000000010c295f2e808af78d8240c3365d9d52b28e2061f9a55ce9dcd29\",\r\n\t\"merkleroot\": \"731c342c75237fe72e2d27a6820f6384498add97f96dcef9c6f2fd558a80f4c9\",\r\n\t\"stakeroot\": \"c3d75f22a1e9bb4b50155f95d9b7a977f7ed1ecaf05024e157a77d7b5697fe04\",\r\n\t\"votebits\": 1,\r\n\t\"finalstate\": \"6acc9d2694f3\",\r\n\t\"voters\": 5,\r\n\t\"freshstake\": 3,\r\n\t\"revocations\": 0,\r\n\t\"poolsize\": 42084,\r\n\t\"bits\": \"1a166536\",\r\n\t\"sbits\": 22.66271576,\r\n\t\"height\": 35552,\r\n\t\"size\": 3764,\r\n\t\"time\": 1465510687,\r\n\t\"nonce\": 2821830658,\r\n\t\"difficulty\": 749126.76453394\r\n}\r\n~~~\r\n\r\n1. Ticket pool info.  This is a custom data structure.\r\n\r\n ~~~json\r\n\"ticket_pool_info\": {\r\n\t\"poolsize\": 42084,\r\n\t\"poolvalue\": 745705.38747115,\r\n\t\"poolvalavg\": 17.71945127\r\n}\r\n~~~\r\n\r\n1. Ticket fee info (block).  This is the usual output of `ticketfeeinfo` with\r\nno extra arguments:\r\n\r\n ~~~json\r\n\"ticketfeeinfo_block\": {\r\n\t\"height\": 35552,\r\n\t\"number\": 3,\r\n\t\"min\": 0.01010101,\r\n\t\"max\": 0.01013513,\r\n\t\"mean\": 0.01011238,\r\n\t\"median\": 0.01010101,\r\n\t\"stddev\": 1.97e-05\r\n}\r\n~~~\r\n\r\n1. Current and estimated stake difficulty.  These are the usual outputs of\r\n`estimatestakediff` and `getstakedifficulty`:\r\n\r\n ~~~json\r\n\"estimatestakediff\": {\r\n\t\"min\": 23.80700879,\r\n\t\"max\": 28.94194858,\r\n\t\"expected\": 25.46730598\r\n},\r\n\"currentstakediff\": {\r\n\t\"current\": 22.66271576,\r\n\t\"next\": 22.66271576\r\n}\r\n~~~\r\n\r\nWallet data is stored in a similar manner in file `stake-info-[BLOCKNUM].json`.\r\nThere are three data types, tagged `\"getstakeinfo`\", `\"walletinfo\"`, and\r\n`\"balances\"`.  TODO: Update this README with a testnet example output.\r\n\r\n## Issue Tracker\r\n\r\nPlease report any issues using the [GitHub issue tracker](https://github.com/chappjc/dcrspy/issues).\r\n\r\n## License\r\n\r\ndcrspy is licensed under the [copyfree](http://copyfree.org) ISC License.\r\n\r\ndcrspy borrows its logging and config file facilities, plus some boilerplate\r\ncode in main.go, from the dcrticketbuyer project by the Decred developers.\r\nThe rest is by chappjc.\r\n\r\n[1]: https://godoc.org/github.com/decred/dcrrpcclient\r\n[2]: https://github.com/decred/dcrd/blob/master/docs/json_rpc_api.md\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}